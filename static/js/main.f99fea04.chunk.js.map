{"version":3,"sources":["SubmitPromptDialog.js","CurrentPoll.js","PastScp.js","Navigation.js","About.js","Footer.js","ButtonAppBar.js","App.js","reportWebVitals.js","index.js"],"names":["UserForm","props","useState","starting_value","value","setValue","type","name","fullWidth","onChange","event","target","startsWith","onValueChange","ClassSelect","React","scpClass","setScpClass","InputLabel","id","Select","labelId","onClassChange","MenuItem","FormDialog","open","setOpen","prompt","setPrompt","handleClose","Button","variant","color","onClick","Dialog","maxWidth","onClose","DialogTitle","DialogContent","DialogContentText","console","log","DialogActions","url","substring","toString","Math","floor","random","fetch","useStyles","makeStyles","root","title","fontSize","Card","marginBottom","PollItem","classes","Grid","item","xs","sm","md","className","CardContent","Badge","bg","CardActions","size","n","idx","votes","PollList","items","pollingItems","sort","a","b","map","index","container","spacing","CurrentPoll","setPollingItems","useEffect","then","res","json","data","poll","getScp","file","text","ListScp2","scpList","undefined","scp","Accordion","Item","eventKey","Header","class","Body","desc","ReadRawGithub","scp_list","setScpList","str","list_scp","readString","length","pop","i","push","withRouter","to","location","pathname","About","Footer","theme","flexGrow","menuButton","marginRight","ButtonAppBar","time","setTime","parseInt","AppBar","position","Toolbar","Typography","date","Date","App","path","exact","component","PastScp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f99fea04.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nfunction UserForm(props){\n    // Champ de texte qui commencera toujours par la valeur de son prop starting_value\n    const [value, setValue] = useState(props.starting_value);\n    return  <textarea type=\"text\" name=\"user_prompt\" value={value} fullWidth\n\n        onChange={event => {\n            if (event.target.value.startsWith(props.starting_value)){\n                setValue(event.target.value);\n                props.onValueChange(event);\n\n            }\n        }}\n    />;\n}\n\n\nfunction ClassSelect(props) {\n    const [scpClass, setScpClass] = React.useState(props.value);\n\n    const handleChange = (event) => {\n        setScpClass(event.target.value);\n        props.onClassChange(event);\n    };\n\n    return (\n        <div>\n            <InputLabel id=\"demo-simple-select-label\">Classe</InputLabel>\n                <Select\n                  labelId=\"SCP-Class\"\n                  id=\"scpClassSelect\"\n                  value={scpClass}\n                  onChange={handleChange}\n                >\n                  <MenuItem value={0}>Safe</MenuItem>\n                  <MenuItem value={1}>Euclide</MenuItem>\n                  <MenuItem value={2}>Keter</MenuItem>\n                  <MenuItem value={3}>Thomiel</MenuItem>\n            </Select>\n        </div>\n    )\n\n}\n\n\nexport default function FormDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  const [prompt, setPrompt] = React.useState(\"\");\n  const [scpClass, setScpClass] = React.useState(0);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = () =>{\n      let url = \"https://thisscpdoesnotexist.pythonanywhere.com/add_prompt/?prompt=\" + prompt.substring(11) + \"&class=\" + scpClass.toString() + \"&ip=\" + Math.floor(Math.random() * 100).toString()\n        fetch(url);\n      console.log(\"fetched\");\n      handleClose();\n  };\n\n  return (\n    <div>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen} fullWidth>\n        <h3>Submit a prompt !</h3>\n      </Button>\n      <Dialog fullWidth maxWidth=\"sm\" open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Submit your SCP idea !</DialogTitle>\n        <DialogContent>\n\n          <DialogContentText>\n            Describe your SCP :\n          </DialogContentText>\n            <UserForm starting_value=\"SCP 104 is \" onValueChange={(event) =>{\n                setPrompt(event.target.value);\n            }} />\n\n            <br/>\n            <br/>\n\n            <ClassSelect onClassChange={(event) => {\n                console.log(event.target.value);\n                setScpClass( event.target.value);\n            }}\n                         value={scpClass}\n            />\n\n\n\n\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","\nimport {useEffect, useState} from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport \"./CurrentPoll.css\";\nimport Badge from 'react-bootstrap/Badge';\n\nimport SubmitPromptDialog from './SubmitPromptDialog';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 500,\n  },\n  title: {\n    fontSize: 14,\n  },\n    Card:{\n      marginBottom: \"-50%\"\n    },\n    //\n    // Keter:{\n    //   backgroundColor: \"#ffaaa7\"\n    // },\n    // Euclid:{\n    //   backgroundColor:\"#ffd3b4\"\n    // },\n    // Safe:{\n    //   backgroundColor:\"#d5ecc2\"\n    // }\n\n\n\n});\n\n\nfunction PollItem(props){\n    const classes = useStyles();\n    let gridclass = classes.root + ' ' + props.scpClass;\n\n    function handleClick(n) {\n        fetch('https://thisscpdoesnotexist.pythonanywhere.com/vote/?n=' + n.toString()  + '&ip=' +Math.floor(Math.random() * 100).toString())\n    }\n\n    return(\n      // <div className=\"pollItem\">\n      //     <p>{props.prompt} ({props.scpClass}) <button>Vote ({props.votes})</button></p>\n      // </div>\n\n        <Grid item xs={12} sm={6} md={3}>\n            <Card className={classes.root}>\n                <CardContent>\n\n                    <Badge bg={props.scpClass == \"Keter\" ? \"danger\" : props.scpClass == \"Euclid\" ? \"warning\" : \"success\" }>\n                        {/*<Typography className={classes.title} color=\"textSecondary\" gutterBottom>*/}\n                            {props.scpClass}\n                        {/*</Typography>*/}\n                    </Badge>\n                    <br />\n                    <br/>\n                    {props.prompt}\n\n                    <CardActions>\n                        <Button size=\"small\" onClick={() => handleClick(props.idx)}><strong>Votes !</strong> ({props.votes})</Button>\n                    </CardActions>\n                </CardContent>\n            </Card>\n        </Grid>\n\n\n    );\n}\n\nfunction PollList(props){\n    //props : pollingItems : [{prompt : .., votes : ..}, ...]\n    // sort by ascending\n    \n    const sorted = props.pollingItems.sort(((a, b) => b.votes - a.votes));\n    \n    const items = sorted.map((item) => <PollItem prompt={item.prompt}\n                                                           scpClass={item.scpClass}\n                                                           votes={item.votes}\n                                                           idx={item.index}\n\n    />);\n    return(\n        <div className=\"poll-list\">\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    )\n}\n\n\n\n\n\nfunction CurrentPoll() {\n\n    const [pollingItems, setPollingItems] = useState([])\n\n    useEffect(() => {\n        let cur_url = 'https://thisscpdoesnotexist.pythonanywhere.com/get_poll/';\n        fetch( cur_url)\n            .then((res) => res.json())\n            .then((data) => {\n                setPollingItems(data.poll);\n            })}, []\n    );\n\n\n\n\n  return (\n    <div className=\"CurrentPoll\">\n\n        <strong>Current Poll :</strong>\n        <br/>\n        <br/>\n\n        <PollList pollingItems={pollingItems}/>\n        <br/>\n        <br/>\n        <SubmitPromptDialog className=\"openDialogBtn\" />\n\n    </div>\n  );\n}\n\nexport default CurrentPoll;\n","import './App.css';\nimport {useEffect, useState} from \"react\";\n// import  {pastScps} from './scpData';\nimport {Accordion} from 'react-bootstrap';\nimport { readString } from 'react-papaparse';\nimport Badge from 'react-bootstrap/Badge';\n\nlet scp_url = \"https://raw.githubusercontent.com/thisscpdoesnotexist/thisscpdoesnotexist.github.io/main/raw_scp/\"\n\nfunction getScp(file) {\n    let cur_url = scp_url + file\n    return fetch(cur_url)\n        .then((res) => {return res.text()})\n        .then((data) => {return data});\n}\n\nfunction ListScp2(scpList){\n    if(scpList.data === undefined){\n        return \"Loading...\";\n    }\n\n    console.log(scpList.data);\n\n    const listPastScp = scpList.data.map((scp, index) =>\n        <Accordion.Item eventKey={index.toString()}>\n            <Accordion.Header>\n                <strong>{scp.prompt} &nbsp;</strong>\n                <Badge bg={scp.class === \"Keter\" ? \"danger\" : scp.class === \"Euclid\" ? \"warning\" : \"success\" }>\n                    {scp.class}\n                </Badge>\n                </Accordion.Header>\n            <Accordion.Body>\n                {scp.desc}\n            </Accordion.Body>\n        </Accordion.Item>\n    )\n\n    return listPastScp;\n}\n\nfunction ReadRawGithub() {\n    const [scp_list, setScpList] = useState([]);\n\n    useEffect(async function fun() {\n        let str = await getScp(\"scp_list.csv\");\n        let list_scp = readString(str);\n\n        if(list_scp.data[list_scp.data.length - 1].length != 3){\n            list_scp.data.pop();\n        }\n\n        let scp = [];\n        for(var i = 0; i < list_scp.data.length; i++) {\n            scp.push(\n                {\n                    prompt: list_scp.data[i][0],\n                    class: list_scp.data[i][1],\n                    desc: await(getScp(list_scp.data[i][2]))\n                }\n            );\n        }\n\n        console.log(\"there it is\");\n        console.log(scp);\n\n        setScpList(scp);\n    }, []);\n\n    return (\n        <div className=\"ReadRawGithub\">\n\n            <h2> List of Past SCPs</h2>\n\n            <Accordion>\n                <ListScp2 data={scp_list} />\n            </Accordion>\n\n        </div>\n    )\n}\n\nexport default ReadRawGithub;\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Navigation(props) {\n  return (\n    <div className=\"navigation\">\n      <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\n        <div class=\"container\">\n          <Link class=\"navbar-brand\" to=\"/\">\n            This SCP Does Not Exist !\n          </Link>\n\n          <div>\n            <ul class=\"navbar-nav ml-auto\">\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/\">\n                  Poll\n                </Link>\n              </li>\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/list\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/list\">\n                  List SCPs\n                </Link>\n              </li>\n              <li\n                class={`nav-item  ${\n                  props.location.pathname === \"/about\" ? \"active\" : \"\"\n                }`}\n              >\n                <Link class=\"nav-link\" to=\"/about\">\n                  About\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default withRouter(Navigation);","\nfunction About() {\n  return (\n    <div className=\"App\">\n      Made using the power of GPT-3\n    </div>\n  );\n}\n\nexport default About;\n","\nfunction Footer() {\n  return (\n    <div className=\"Footer navbar fixed-bottom\">\n      Made by Retronyme and Filouface\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, {useEffect, useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {Link} from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Countdown from \"react-countdown\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n\n\n    const [time, setTime] = useState(0);\n\n\n    useEffect(() => {\n        let cur_url = 'https://thisscpdoesnotexist.pythonanywhere.com/next_time/';\n        fetch( cur_url)\n            .then((res) => res.text())\n            .then((data) => {\n                setTime(parseInt(data) * 1000);\n            })}, []\n    );\n\n\n\n\n\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/*<IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">*/}\n          {/*  <MenuIcon />*/}\n          {/*</IconButton>*/}\n\n            <Grid container spacing={3}>\n\n                <Grid item xs={12} sm={3}>\n\n                    <Button color=\"inherit\">\n                      <Typography variant=\"h5\" className={classes.title}>\n                          This SCP Does Not Exist\n                      </Typography>\n                  </Button>\n                </Grid>\n                \n                <Grid item sm={5}>\n                    <h1><Countdown date={new Date(time)} /></h1>\n                </Grid>\n                \n                <Grid item xs={12}  sm={1}>\n                    <Link to={'/'}>\n                          <Button color=\"inherit\">\n                              {/*<Typography variant=\"h6\" className={classes.title}>*/}\n                              <strong>Poll</strong>\n                              {/*</Typography>*/}\n                          </Button>\n                        </Link>\n                </Grid>\n\n                <Grid item xs={12} sm={1}>\n                    <Link to={'/list'}>\n\n                  <Button color=\"inherit\">\n                      {/*<Typography variant=\"h6\" className={classes.title}>*/}\n                      <strong>Past SCPs</strong>\n                      {/*</Typography>*/}\n                  </Button>\n                    </Link>\n                </Grid>\n                <Grid item xs={12}  sm={1}>\n                <Link to={'/about'}>\n                  <Button color=\"inherit\">\n                      {/*<Typography variant=\"h6\" className={classes.title}>*/}\n                      <strong>About</strong>\n                      {/*</Typography>*/}\n                  </Button>\n                </Link>\n                </Grid>\n            </Grid>\n\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import './App.css';\nimport CurrentPoll from './CurrentPoll.js'\nimport PastScp from './PastScp.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./customStyle.css\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navigation from \"./Navigation\";\nimport About from \"./About\";\nimport Footer from \"./Footer\";\nimport ButtonAppBar from \"./ButtonAppBar\";\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //\n    //   <CurrentPoll />\n    //     <PastScp/>\n    //\n    // </div>\n\n      <div className=\"App\">\n      <Router>\n        <ButtonAppBar />\n        <br/>\n        <Switch>\n          <Route path=\"/\" exact component={ CurrentPoll} />\n          <Route path=\"/list\" exact component={ PastScp } />\n          <Route path=\"/about\" exact component={ About } />\n        </Switch>\n        <Footer/>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}